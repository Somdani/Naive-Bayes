{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Naive Bayes","provenance":[],"authorship_tag":"ABX9TyM8NBImq8vmeJGrRz2jftwO"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"O5ViD5BtJ-kC","colab_type":"text"},"source":["Importing necessary libraries"]},{"cell_type":"code","metadata":{"id":"3sFQh54lJfGv","colab_type":"code","colab":{}},"source":["import io\n","import re\n","import string\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","from google.colab import files\n","import matplotlib.pyplot as plt\n","import pandas.util.testing as tm\n","from collections import defaultdict"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ruDv_PHSKKe0","colab_type":"text"},"source":["Loading dataset file from computer"]},{"cell_type":"code","metadata":{"id":"-wFRRoLNRgcG","colab_type":"code","colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":56},"outputId":"fb4083ab-a901-4441-b587-ec4399b68c9b"},"source":["uploaded = files.upload()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-4f05cf6c-4772-4844-a9b3-8c36b7000746\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-4f05cf6c-4772-4844-a9b3-8c36b7000746\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving reviews.csv to reviews (5).csv\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rfhPZ1_GXZMv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":183},"executionInfo":{"status":"error","timestamp":1597325224768,"user_tz":-120,"elapsed":2909,"user":{"displayName":"Bhekie Danisa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhmsYGB0mgQUWYYHxI_HZi2IuqyYWWOJKzWPkQnog=s64","userId":"08130286768115880273"}},"outputId":"b373091e-d69c-4d7e-c6dd-b7fff2e62d94"},"source":["path = io.BytesIO(uploaded['reviews.csv'])\n","data = pd.read_csv(path)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-438362e30a5f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muploaded\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'reviews.csv'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'uploaded' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"VXoY4EshKajG","colab_type":"text"},"source":["Dropping Id column"]},{"cell_type":"code","metadata":{"id":"TvuXbh82YzxS","colab_type":"code","colab":{}},"source":["data = data.drop(['Id'], axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eW8AUekZLAQn","colab_type":"text"},"source":["Assigning columns to X and Y"]},{"cell_type":"code","metadata":{"id":"x5aHxbbPb7d_","colab_type":"code","colab":{}},"source":["X = data['Review']\n","Y = data['Label']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tQzSbNYDJ7Ri","colab_type":"text"},"source":["Counting ratings per category"]},{"cell_type":"code","metadata":{"id":"D5e9dZpqb7t3","colab_type":"code","colab":{}},"source":["ratings = pd.DataFrame(data.groupby('Label').size()).reset_index()\n","ratings.columns = ['Stars', 'count']\n","ratings"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KNl2-W7zuOWI","colab_type":"text"},"source":["Visualizing the labels in a form of bar chart "]},{"cell_type":"code","metadata":{"id":"7z4SN51Mb7o7","colab_type":"code","colab":{}},"source":["from matplotlib.pyplot import figure\n","sns.set(context = 'poster', style = 'ticks', font_scale = 0.5)\n","sns.catplot(x = \"Stars\", y = \"count\", kind  = 'bar', palette = \"ch:.25\", data = ratings)\n","plt.title('Ratings from 1-5 stars')\n","plt.xlabel('Rating stars')\n","plt.ylabel('Number of reviews')\n","sns.despine()\n","plt.tight_layout();"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qd1bOnlvudY7","colab_type":"text"},"source":["Cleaning texts "]},{"cell_type":"code","metadata":{"id":"jp6KgzNfcgVe","colab_type":"code","colab":{}},"source":["def clean_text(str):\n","    clean = re.sub('[^a-z\\s]+', ' ', str, flags = re.IGNORECASE) \n","    clean = re.sub('(\\s+)', ' ', clean) \n","    clean = clean.lower() \n","        \n","    return clean "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xKHQmgTg24dE","colab_type":"text"},"source":["Building Naive Bayes Classifier"]},{"cell_type":"code","metadata":{"id":"ez2aO0atgIPv","colab_type":"code","colab":{}},"source":["class NaiveBayes:\n","    \n","    def __init__(self, distinct_classes):\n","        self.classes = distinct_classes\n","        \n","    def bag_of_words(self, samples, indx):\n","        if isinstance(samples, np.ndarray): \n","          samples = samples[0]\n","     \n","        for token in samples.split():\n","            self.dictionary[indx][token] += 1\n","            \n","    def train(self, data, labels):\n","        self.samples = data\n","        self.labels = labels\n","        self.dictionary = np.array([defaultdict(lambda:0) for index in range(self.classes.shape[0])])\n","        \n","        if not isinstance(self.samples, np.ndarray): \n","          self.samples = np.array(self.samples)\n","\n","        if not isinstance(self.labels, np.ndarray): \n","          self.labels = np.array(self.labels)\n","            \n","        for indx, category in enumerate(self.classes):\n","            all_samples = self.samples[self.labels == category] \n","            clean_samples = [clean_text(category_sample) for category_sample in all_samples]\n","            \n","            clean_samples = pd.DataFrame(data = clean_samples)\n","            np.apply_along_axis(self.bag_of_words, 1, clean_samples, indx)\n","            \n","        class_probability = np.empty(self.classes.shape[0])\n","        all_words = []\n","        category_counts = np.empty(self.classes.shape[0])\n","        for indx, category in enumerate(self.classes):\n","            class_probability[indx] = np.sum(self.labels == category) / float(self.labels.shape[0]) \n","            \n","            count = list(self.dictionary[indx].values())\n","            category_counts[indx] = np.sum(np.array(list(self.dictionary[indx].values()))) + 1                               \n","            all_words += self.dictionary[indx].keys()\n","                                                        \n","        self.vocabulary = np.unique(np.array(all_words))\n","        self.vocab_size = self.vocabulary.shape[0]\n","                                                                      \n","        devisor = np.array([category_counts[indx] + self.vocab_size + 1 for indx, category in enumerate(self.classes)])                                                                          \n","        self.category_data = [(self.dictionary[indx], class_probability[indx], devisor[indx]) for indx, cat in enumerate(self.classes)]                               \n","        self.category_data =np.array(self.category_data)                                 \n","                                                                                  \n","    def sample_probability(self, test_sample):                                                                            \n","        likelihood = np.zeros(self.classes.shape[0]) \n","        for indx, category in enumerate(self.classes):                 \n","            for tokenize in test_sample.split():                          \n","                tokenize_counts = self.category_data[indx][0].get(tokenize, 0) + 1                             \n","                token_probability = tokenize_counts / float(self.category_data[indx][2])                      \n","                likelihood[indx] += np.log(token_probability)\n","                          \n","        posterior = np.empty(self.classes.shape[0])\n","        for indx, category in enumerate(self.classes):\n","            posterior[indx]= likelihood[indx] + np.log(self.category_data[indx][1])                                  \n","      \n","        return posterior\n","    \n","    def test(self, test_data):\n","        predictions=[] \n","        for sample in test_data:                                  \n","            clean_sample = clean_text(sample)                             \n","            posterior = self.sample_probability(clean_sample)            \n","            predictions.append(self.classes[np.argmax(posterior)])\n","                \n","        return np.array(predictions)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l32NJtKMekhB","colab_type":"code","colab":{}},"source":["#Splitting 80% of data for training and 20% for test\n","train_percent = 80\n","train_size = int((train_percent*len(data))/100)\n","X_train_reviews = X.iloc[:train_size]\n","Y_train_labels = Y.iloc[:train_size]\n","X_test_reviews = X.iloc[train_size:]\n","Y_test_labels = Y.iloc[train_size:]\n","classes = np.unique(Y_train_labels)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Vk_QWhKGquFy","colab_type":"code","colab":{}},"source":["Naive_Bayes_Model = NaiveBayes(classes)\n","print(\"----------Training In Progress----------\")\n","print(\"-         Training Examples: \", X_train_reviews.shape[0])\n","Naive_Bayes_Model.train(X_train_reviews, Y_train_labels)\n","print(\"----------Training Completed!-----------\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gi2-8eKqrNAc","colab_type":"code","colab":{}},"source":["print(\"----------Training In Progress----------\")\n","p_c = Naive_Bayes_Model.test(X_test_reviews)\n","Accuracy = np.sum(p_c == Y_test_labels) / float(Y_test_labels.shape[0])\n","print(\"Test Set Examples: \", Y_test_labels.shape[0])\n","print(\"Test Set Accuracy: \", Accuracy)\n","print(\"------The model is working perfect------\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Dqi7ZBEtSr2p","colab_type":"code","colab":{}},"source":["#Splitting 80% of train data for training and 20% for cross validation\n","valid_percent = 80\n","valid_size = int((valid_percent*len(Y_train_labels))/100)\n","xtrain_reviews = X_train_reviews.iloc[:valid_size]\n","ytrain_labels = Y_train_labels.iloc[:valid_size]\n","xcrossv_reviews = X_train_reviews.iloc[valid_size:]\n","ycrossv_labels = Y_train_labels.iloc[valid_size:]\n","classe = np.unique(ycrossv_labels)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MPu7HqLoStUm","colab_type":"code","colab":{}},"source":["Counter(Y_train_labels).values()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NENaf698SuGq","colab_type":"code","colab":{}},"source":["Counter(Y_test_labels).values()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SLSpk24zSs1C","colab_type":"code","colab":{}},"source":["Counter(ytrain_labels).values()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WpZcL_Zg1fCs","colab_type":"code","colab":{}},"source":["Counter(ycrossv_labels).values()"],"execution_count":null,"outputs":[]}]}